class SessionManager {
  constructor() {
    this.SESSION_KEY = 'secure_voice_session';
    this.TOKEN_KEY = 'secure_voice_token';
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  async createOrRestoreSession(name) {
    try {
      const API_BASE_URL = process.env.REACT_APP_API_URL || window.location.origin;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
      const existingSession = this.getCurrentUser();
      if (existingSession && existingSession.name === name) {
        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è');
        return existingSession;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const response = await fetch(`${API_BASE_URL}/api/session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      this.saveSession(data.user);
      this.saveToken(data.jwt_token);
      
      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data.user);
      return data.user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
  saveSession(user) {
    try {
      localStorage.setItem(this.SESSION_KEY, JSON.stringify(user));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage
  saveToken(token) {
    try {
      localStorage.setItem(this.TOKEN_KEY, token);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser() {
    try {
      const userData = localStorage.getItem(this.SESSION_KEY);
      console.log('üîç getCurrentUser() - raw data:', userData);
      
      if (!userData) {
        console.log('üîç getCurrentUser() - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage');
        return null;
      }
      
      const user = JSON.parse(userData);
      console.log('üîç getCurrentUser() - parsed user:', user);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ user.id, —Ç–∞–∫ –∏ user.user_id)
      if (user && typeof user === 'object' && (user.id || user.user_id) && user.name) {
        console.log('‚úÖ getCurrentUser() - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞–ª–∏–¥–µ–Ω');
        return user;
      }
      
      console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é');
      this.clearSession();
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      this.clearSession();
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  getToken() {
    try {
      return localStorage.getItem(this.TOKEN_KEY);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
  hasValidSession() {
    const session = this.getStoredSession();
    if (!session) return false;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this.sessionToken = session.session_token;
    this.jwtToken = session.jwt_token;
    this.userData = session.user;
    
    const user = this.getCurrentUser();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ user.id, —Ç–∞–∫ –∏ user.user_id (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
    const isValid = !!(user && (user.id || user.user_id) && user.name);
    console.log('üîç hasValidSession() –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
      user,
      hasId: !!(user && user.id),
      hasUserId: !!(user && user.user_id),
      hasName: !!(user && user.name),
      isValid
    });
    return isValid;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
  clearSession() {
    try {
      localStorage.removeItem(this.SESSION_KEY);
      localStorage.removeItem(this.TOKEN_KEY);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  getAuthHeaders() {
    const token = this.getToken();
    return token ? { 'Authorization': `Bearer ${token}` } : {};
  }
}

export default SessionManager;
