import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  Mic, 
  MicOff, 
  Phone, 
  Users, 
  Volume2,
  VolumeX,
  PhoneCall,
  PhoneOff
} from 'lucide-react';
import CookieSessionManager from '../utils/CookieSessionManager';

const AudioMeetingRoom = () => {
  const { roomId } = useParams();
  const navigate = useNavigate();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ CookieSessionManager, —á—Ç–æ –∏ App.js
  const sessionManagerInstance = useMemo(() => new CookieSessionManager(), []);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [isInCall, setIsInCall] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [isSpeakerOn, setIsSpeakerOn] = useState(true);
  const [participants, setParticipants] = useState([]);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStreams, setRemoteStreams] = useState(new Map());
  const [isInRoom, setIsInRoom] = useState(false);
  const [callDuration, setCallDuration] = useState(0);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [speakingUsers, setSpeakingUsers] = useState(new Set());
  const [isCallActive, setIsCallActive] = useState(false);
  const [audioLevel, setAudioLevel] = useState(0);
  
  // Refs
  const wsRef = useRef(null);
  const peerConnections = useRef(new Map());
  const callStartTime = useRef(null);
  const durationInterval = useRef(null);
  const audioContext = useRef(null);
  const analyser = useRef(null);
  const microphone = useRef(null);
  const dataArray = useRef(null);
  const animationFrame = useRef(null);
  const audioElements = useRef(new Map());
  
  const API_BASE_URL = process.env.REACT_APP_API_URL || window.location.origin;
  const sessionManager = new CookieSessionManager();

  // WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const rtcConfig = {
    iceServers: [
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun1.l.google.com:19302' }
    ]
  };

  // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  const connectWebSocket = useCallback((roomId, userId) => {
    const baseUrl = API_BASE_URL.replace('https://', 'wss://').replace('http://', 'ws://');
    const wsUrl = `${baseUrl}/ws/${roomId}/${userId}`;
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
    
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }

    const ws = new WebSocket(wsUrl);
    wsRef.current = ws;

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        
        switch (data.type) {
          case 'user_joined':
            handleUserJoined(data.user);
            break;
          case 'user_left':
            handleUserLeft(data.user_id);
            break;
          case 'participants_update':
            if (data.participants) {
              console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', data.participants);
              setParticipants(data.participants);
              
              // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
              setTimeout(() => {
                data.participants.forEach(participant => {
                  if (participant.id !== currentUser?.id && localStream && !peerConnections.current.has(participant.id)) {
                    console.log('üîó –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞:', participant.name);
                    createPeerConnection(participant.id).then(pc => {
                      if (pc && localStream) {
                        pc.createOffer().then(offer => {
                          pc.setLocalDescription(offer).then(() => {
                            sendWebRTCMessage({
                              type: 'webrtc_offer',
                              to: participant.id,
                              offer: offer
                            });
                          });
                        }).catch(error => {
                          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:', error);
                        });
                      }
                    });
                  }
                });
              }, 500);
            }
            break;
          case 'webrtc_offer':
            handleWebRTCOffer(data);
            break;
          case 'webrtc_answer':
            handleWebRTCAnswer(data);
            break;
          case 'webrtc_ice_candidate':
            handleWebRTCIceCandidate(data);
            break;
          case 'speaking':
            console.log('üé§ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–µ—á–∏ –æ—Ç:', data.user_id, '–ì–æ–≤–æ—Ä–∏—Ç:', data.is_speaking);
            handleSpeakingStatus(data);
            break;
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket:', error);
      }
    };

    ws.onopen = () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    };

    ws.onclose = () => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    };

    ws.onerror = (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
    };
  }, [API_BASE_URL, currentUser?.id, localStream]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–æ–±—ã—Ç–∏–π
  const handleUserJoined = (user) => {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', user);
    setParticipants(prev => {
      const exists = prev.find(p => p.id === user.id);
      if (exists) {
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ:', user.name);
        return prev;
      }
      console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', user.name, '–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', prev.length + 1);
      return [...prev, user];
    });
    
    // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (localStream && user.id !== currentUser?.id) {
      createPeerConnection(user.id).then(pc => {
        // –°–æ–∑–¥–∞–µ–º offer –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (pc && localStream) {
          pc.createOffer().then(offer => {
            pc.setLocalDescription(offer).then(() => {
              sendWebRTCMessage({
                type: 'webrtc_offer',
                to: user.id,
                offer: offer
              });
            });
          }).catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', error);
          });
        }
      });
    }
  };

  const handleUserLeft = (userId) => {
    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª:', userId);
    setParticipants(prev => prev.filter(p => p.id !== userId));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const pc = peerConnections.current.get(userId);
    if (pc) {
      pc.close();
      peerConnections.current.delete(userId);
    }
    
    // –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
    setRemoteStreams(prev => {
      const newMap = new Map(prev);
      newMap.delete(userId);
      return newMap;
    });

    // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
    const audioElement = audioElements.current.get(userId);
    if (audioElement) {
      audioElement.remove();
      audioElements.current.delete(userId);
    }
  };

  const handleWebRTCOffer = async (data) => {
    console.log('üìû –ü–æ–ª—É—á–µ–Ω WebRTC offer –æ—Ç:', data.from);
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    let pc = peerConnections.current.get(data.from);
    if (!pc) {
      pc = await createPeerConnection(data.from);
    }
    
    try {
      await pc.setRemoteDescription(new RTCSessionDescription(data.offer));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      
      sendWebRTCMessage({
        type: 'webrtc_answer',
        to: data.from,
        answer: answer
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:', error);
    }
  };

  const handleWebRTCAnswer = async (data) => {
    console.log('üìû –ü–æ–ª—É—á–µ–Ω WebRTC answer –æ—Ç:', data.from);
    const pc = peerConnections.current.get(data.from);
    if (pc) {
      try {
        await pc.setRemoteDescription(new RTCSessionDescription(data.answer));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:', error);
      }
    }
  };

  const handleWebRTCIceCandidate = async (data) => {
    console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç:', data.from);
    const pc = peerConnections.current.get(data.from);
    if (pc) {
      try {
        await pc.addIceCandidate(new RTCIceCandidate(data.candidate));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error);
      }
    }
  };

  const handleSpeakingStatus = (data) => {
    console.log('üé§ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—á–∏ –¥–ª—è:', data.user_id, '–ì–æ–≤–æ—Ä–∏—Ç:', data.is_speaking);
    setSpeakingUsers(prev => {
      const newSet = new Set(prev);
      if (data.is_speaking) {
        newSet.add(data.user_id);
        console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user_id);
      } else {
        newSet.delete(data.user_id);
        console.log('‚ùå –£–¥–∞–ª—è–µ–º –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user_id);
      }
      console.log('üë• –¢–µ–∫—É—â–∏–µ –≥–æ–≤–æ—Ä—è—â–∏–µ:', Array.from(newSet));
      return newSet;
    });
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const createPeerConnection = useCallback(async (userId) => {
    console.log('üîó –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å:', userId);
    
    const pc = new RTCPeerConnection(rtcConfig);
    peerConnections.current.set(userId, pc);

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (localStream) {
      localStream.getTracks().forEach(track => {
        pc.addTrack(track, localStream);
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    pc.ontrack = (event) => {
      console.log('üéµ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Ç:', userId);
      const remoteStream = event.streams[0];
      setRemoteStreams(prev => {
        const newMap = new Map(prev);
        newMap.set(userId, remoteStream);
        return newMap;
      });
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const audioElement = document.createElement('audio');
      audioElement.srcObject = remoteStream;
      audioElement.autoplay = true;
      audioElement.playsInline = true;
      audioElement.volume = isSpeakerOn ? 1.0 : 0.0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
      document.body.appendChild(audioElement);
      audioElements.current.set(userId, audioElement);
      
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è:', userId);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        sendWebRTCMessage({
          type: 'webrtc_ice_candidate',
          to: userId,
          candidate: event.candidate
        });
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.onconnectionstatechange = () => {
      console.log(`üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}:`, pc.connectionState);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.oniceconnectionstatechange = () => {
      console.log(`üßä ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ${userId}:`, pc.iceConnectionState);
    };

    return pc;
  }, [localStream, isSpeakerOn]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
  const sendWebRTCMessage = useCallback((message) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(message));
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  const sendWebSocketMessage = useCallback((message) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(message));
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
  const getAudioStream = useCallback(async () => {
    try {
      console.log('üé§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 44100
        }
      });
      
      setLocalStream(stream);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
      setupAudioAnalysis(stream);
      
      return stream;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      throw error;
    }
  }, []);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
  const setupAudioAnalysis = useCallback((stream) => {
    try {
      audioContext.current = new (window.AudioContext || window.webkitAudioContext)();
      analyser.current = audioContext.current.createAnalyser();
      microphone.current = audioContext.current.createMediaStreamSource(stream);
      
      analyser.current.fftSize = 256;
      analyser.current.smoothingTimeConstant = 0.8;
      microphone.current.connect(analyser.current);
      
      dataArray.current = new Uint8Array(analyser.current.frequencyBinCount);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
      analyzeAudio();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ:', error);
    }
  }, []);

  // –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
  const analyzeAudio = useCallback(() => {
    if (!analyser.current || !dataArray.current) return;
    
    analyser.current.getByteFrequencyData(dataArray.current);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
    const average = dataArray.current.reduce((a, b) => a + b) / dataArray.current.length;
    const threshold = 30; // –ü–æ—Ä–æ–≥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
    const currentlySpeaking = average > threshold;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞—É–¥–∏–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    setAudioLevel(Math.min(average / 100, 1));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—á–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (currentlySpeaking !== isSpeaking) {
      console.log('üé§ –°—Ç–∞—Ç—É—Å —Ä–µ—á–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è:', currentlySpeaking ? '–ì–û–í–û–†–ò–¢' : '–ú–û–õ–ß–ò–¢');
      setIsSpeaking(currentlySpeaking);
      
      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
        wsRef.current.send(JSON.stringify({
          type: 'speaking',
          user_id: currentUser?.id,
          is_speaking: currentlySpeaking
        }));
      }
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
    animationFrame.current = requestAnimationFrame(analyzeAudio);
  }, [isSpeaking, currentUser?.id]);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  const joinRoom = useCallback(async () => {
    if (!roomId || isInRoom || !isAuthenticated || !currentUser) return;

    try {
      console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∞—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç–µ:', roomId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.name);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      setParticipants(prev => {
        const exists = prev.find(p => p.id === currentUser.id);
        if (!exists) {
          console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', currentUser.name);
          return [...prev, currentUser];
        }
        return prev;
      });
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      connectWebSocket(roomId, currentUser.id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
      await getAudioStream();
      
      setIsInRoom(true);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∞—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç–µ');
      
      // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
      setTimeout(() => {
        participants.forEach(participant => {
          if (participant.id !== currentUser.id && localStream) {
            console.log('üîó –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º:', participant.name);
            createPeerConnection(participant.id).then(pc => {
              if (pc && localStream) {
                pc.createOffer().then(offer => {
                  pc.setLocalDescription(offer).then(() => {
                    sendWebRTCMessage({
                      type: 'webrtc_offer',
                      to: participant.id,
                      offer: offer
                    });
                  });
                }).catch(error => {
                  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
                });
              }
            });
          }
        });
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∞—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç–µ:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∞—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç–µ: ' + error.message);
      navigate('/');
    }
  }, [roomId, isInRoom, isAuthenticated, currentUser, navigate, getAudioStream, createPeerConnection, sendWebRTCMessage, participants, localStream]);

  // –ù–∞—á–∞—Ç—å –∞—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫
  const startCall = useCallback(async () => {
    try {
      console.log('üìû –ù–∞—á–∏–Ω–∞–µ–º –∞—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫');
      setIsCallActive(true);
      setIsInCall(true);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      callStartTime.current = Date.now();
      durationInterval.current = setInterval(() => {
        if (callStartTime.current) {
          setCallDuration(Math.floor((Date.now() - callStartTime.current) / 1000));
        }
      }, 1000);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞
      sendWebSocketMessage({
        type: 'call_started',
        user_id: currentUser?.id
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ-–∑–≤–æ–Ω–∫–∞:', error);
    }
  }, [currentUser, sendWebSocketMessage]);

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫
  const endCall = useCallback(() => {
    console.log('üìû –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫');
    setIsCallActive(false);
    setIsInCall(false);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if (durationInterval.current) {
      clearInterval(durationInterval.current);
      durationInterval.current = null;
    }
    callStartTime.current = null;
    setCallDuration(0);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
    sendWebSocketMessage({
      type: 'call_ended',
      user_id: currentUser?.id
    });
  }, [currentUser, sendWebSocketMessage]);

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
  const toggleMute = useCallback(() => {
    if (localStream) {
      const audioTracks = localStream.getAudioTracks();
      const newMutedState = !isMuted;
      audioTracks.forEach(track => {
        track.enabled = !newMutedState;
      });
      setIsMuted(newMutedState);
      console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω:', newMutedState ? '–≤—ã–∫–ª—é—á–µ–Ω' : '–≤–∫–ª—é—á–µ–Ω');
    }
  }, [localStream, isMuted]);

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫
  const toggleSpeaker = useCallback(() => {
    const newSpeakerState = !isSpeakerOn;
    setIsSpeakerOn(newSpeakerState);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    audioElements.current.forEach(audioElement => {
      audioElement.volume = newSpeakerState ? 1.0 : 0.0;
    });
    
    console.log('üîä –î–∏–Ω–∞–º–∏–∫:', newSpeakerState ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  }, [isSpeakerOn]);

  // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
  const leaveRoom = useCallback(() => {
    console.log('üö™ –ü–æ–∫–∏–¥–∞–µ–º –∞—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç—É');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      setLocalStream(null);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    peerConnections.current.forEach(pc => pc.close());
    peerConnections.current.clear();
    
    // –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
    setRemoteStreams(new Map());
    
    // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    audioElements.current.forEach(audioElement => {
      audioElement.remove();
    });
    audioElements.current.clear();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
    }
    
    if (audioContext.current) {
      audioContext.current.close();
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
    if (wsRef.current) {
      wsRef.current.close();
    }
    
    setIsInCall(false);
    setIsInRoom(false);
    setParticipants([]);
    setCallDuration(0);
    
    if (callStartTime.current) {
      callStartTime.current = null;
    }
    
    if (durationInterval.current) {
      clearInterval(durationInterval.current);
    }
    
    navigate('/');
  }, [localStream, navigate]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatDuration = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const restoreSession = async () => {
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ AudioMeetingRoom...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
      const hasValid = await sessionManagerInstance.hasValidSession();
      
      if (hasValid) {
        const user = await sessionManagerInstance.getCurrentUser();
        console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ AudioMeetingRoom:', user);
        setIsAuthenticated(true);
        setCurrentUser(user);
      } else {
        console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
          id: `user_${Date.now()}`,
          name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${Math.floor(Math.random() * 1000)}`,
          is_creator: false,
          user_id: `user_${Date.now()}`,
          stable_user_id: `stable_${Date.now()}`,
          user_hash: Math.random().toString(36).substring(2, 10)
        };
        
        console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', newUser);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        sessionManagerInstance.saveSession({
          session_token: `session_${Date.now()}`,
          jwt_token: `jwt_${Date.now()}`,
          user: newUser,
          saved_at: Date.now()
        });
        
        setIsAuthenticated(true);
        setCurrentUser(newUser);
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    };
    
    restoreSession();
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç—ã:', { roomId, isInRoom, isAuthenticated });
    
    if (roomId && !isInRoom && isAuthenticated) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const timer = setTimeout(() => {
        joinRoom();
      }, 500);
      
      return () => clearTimeout(timer);
    }
    
    return () => {
      if (durationInterval.current) {
        clearInterval(durationInterval.current);
      }
      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }
    };
  }, [roomId, isInRoom, isAuthenticated, joinRoom]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    const handleBeforeUnload = () => {
      leaveRoom();
    };
    
    const handlePopState = () => {
      leaveRoom();
    };
    
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('popstate', handlePopState);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('popstate', handlePopState);
    };
  }, [leaveRoom]);

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-gray-800 p-4 flex justify-between items-center">
        <div>
          <h1 className="text-xl font-bold">–ê—É–¥–∏–æ-–∫–æ–º–Ω–∞—Ç–∞: {roomId}</h1>
          <p className="text-gray-400">
            {isInCall ? `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(callDuration)}` : '–ì–æ—Ç–æ–≤ –∫ –∞—É–¥–∏–æ-–∑–≤–æ–Ω–∫—É'}
          </p>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Users className="w-5 h-5" />
            <span>{participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
          </div>
          <button
            onClick={leaveRoom}
            className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg flex items-center space-x-2"
          >
            <PhoneOff className="w-4 h-4" />
            <span>–ü–æ–∫–∏–Ω—É—Ç—å</span>
          </button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 p-4">
        {!isInCall ? (
          // –≠–∫—Ä–∞–Ω –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
          <div className="flex flex-col items-center justify-center h-96 space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold mb-2">–ì–æ—Ç–æ–≤ –∫ –∞—É–¥–∏–æ-–∑–≤–æ–Ω–∫—É</h2>
              <p className="text-gray-400">–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞—É–¥–∏–æ-–≤—Å—Ç—Ä–µ—á—É</p>
            </div>
            <button
              onClick={startCall}
              className="bg-green-600 hover:bg-green-700 px-8 py-4 rounded-lg text-lg font-semibold flex items-center space-x-2"
            >
              <PhoneCall className="w-6 h-6" />
              <span>–ù–∞—á–∞—Ç—å –∞—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫</span>
            </button>
          </div>
        ) : (
          // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞—É–¥–∏–æ-–∑–≤–æ–Ω–∫–∞
          <div className="space-y-6">
            {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */}
              <div className="relative bg-gray-800 rounded-lg p-6 text-center">
                <div className="w-20 h-20 bg-blue-600 rounded-full mx-auto mb-4 flex items-center justify-center">
                  <span className="text-2xl font-bold">
                    {currentUser?.name?.charAt(0)?.toUpperCase() || 'U'}
                  </span>
                </div>
                <h3 className="font-semibold mb-2">
                  {currentUser?.name || '–í—ã'}
                  {isSpeaking && <span className="ml-2 text-green-400">üé§</span>}
                </h3>
                <div className="flex items-center justify-center space-x-2 mb-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-sm text-gray-400">–ü–æ–¥–∫–ª—é—á–µ–Ω</span>
                </div>
                {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ */}
                <div className="flex justify-center space-x-1">
                  {[...Array(10)].map((_, i) => (
                    <div
                      key={i}
                      className={`w-1 h-4 rounded ${
                        audioLevel > i / 10 ? 'bg-green-500' : 'bg-gray-600'
                      }`}
                    />
                  ))}
                </div>
                {isMuted && (
                  <div className="absolute top-2 right-2 bg-red-600 p-1 rounded">
                    <MicOff className="w-4 h-4" />
                  </div>
                )}
              </div>

              {/* –£–¥–∞–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ */}
              {participants
                .filter(p => p.id !== currentUser?.id)
                .map(participant => {
                  const isSpeaking = speakingUsers.has(participant.id);
                  
                  return (
                    <div key={participant.id} className="relative bg-gray-800 rounded-lg p-6 text-center">
                      <div className="w-20 h-20 bg-purple-600 rounded-full mx-auto mb-4 flex items-center justify-center">
                        <span className="text-2xl font-bold">
                          {participant.name?.charAt(0)?.toUpperCase() || 'U'}
                        </span>
                      </div>
                      <h3 className="font-semibold mb-2">
                        {participant.name || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                        {isSpeaking && <span className="ml-2 text-green-400">üé§</span>}
                      </h3>
                      <div className="flex items-center justify-center space-x-2 mb-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span className="text-sm text-gray-400">–ü–æ–¥–∫–ª—é—á–µ–Ω</span>
                      </div>
                      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
                      <div className="flex justify-center space-x-1">
                        {[...Array(10)].map((_, i) => (
                          <div
                            key={i}
                            className={`w-1 h-4 rounded ${
                              isSpeaking && Math.random() > 0.3 ? 'bg-green-500' : 'bg-gray-600'
                            }`}
                          />
                        ))}
                      </div>
                    </div>
                  );
                })}
            </div>

            {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex justify-center space-x-4">
              <button
                onClick={toggleMute}
                className={`p-4 rounded-full ${
                  isMuted ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-700 hover:bg-gray-600'
                }`}
                title={isMuted ? '–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω' : '–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω'}
              >
                {isMuted ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6" />}
              </button>
              
              <button
                onClick={toggleSpeaker}
                className={`p-4 rounded-full ${
                  isSpeakerOn ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-700 hover:bg-gray-600'
                }`}
                title={isSpeakerOn ? '–í—ã–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫' : '–í–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫'}
              >
                {isSpeakerOn ? <Volume2 className="w-6 h-6" /> : <VolumeX className="w-6 h-6" />}
              </button>
              
              <button
                onClick={endCall}
                className="p-4 rounded-full bg-red-600 hover:bg-red-700"
                title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"
              >
                <PhoneOff className="w-6 h-6" />
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AudioMeetingRoom;
