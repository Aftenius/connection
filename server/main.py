"""
SecureVoice Backend v2 —Å Redis –∏ —Å–∏—Å—Ç–µ–º–æ–π —Å–µ—Å—Å–∏–π + JWT + Rate Limiting
"""
import json
import uuid
import logging
import time
import asyncio
import hashlib
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Request, Depends, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from jose import JWTError, jwt
from passlib.context import CryptContext
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from redis_manager import redis_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# JWT Configuration
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "your-super-secret-jwt-key-change-in-production")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# JWT Bearer token scheme
security = HTTPBearer()

# Rate limiting
limiter = Limiter(key_func=get_remote_address)

app = FastAPI(title="SecureVoice API v2", version="2.0.0")
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000", 
        "http://client:3000", 
        "http://192.168.127.134:3000",
        "https://app.webnoir.ru",
        "http://app.webnoir.ru"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
active_connections: Dict[str, List[WebSocket]] = {}
user_connections: Dict[str, Dict[str, WebSocket]] = {}  # {room_id: {user_id: websocket}}

# Pydantic –º–æ–¥–µ–ª–∏
class UserSession(BaseModel):
    user_id: str
    name: str
    ip_address: str
    user_agent: str
    created_at: float
    last_seen: float

class RoomCreate(BaseModel):
    name: str
    password: str = ""
    max_participants: int = 10
    requires_password: bool = False
    has_waiting_room: bool = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è

class UserJoin(BaseModel):
    name: str
    password: str = ""
    session_token: Optional[str] = None

class Room(BaseModel):
    id: str
    name: str
    password: str
    creator_id: str
    creator_name: str
    max_participants: int
    requires_password: bool
    has_waiting_room: bool
    is_active: bool
    created_at: float
    updated_at: float

class User(BaseModel):
    id: str
    name: str
    ip_address: str = ""
    is_creator: bool = False
    joined_at: float
    is_muted: bool = False
    is_speaking: bool = False

# === UTILS ===

def generate_user_hash(name: str, ip: str, user_agent: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ö—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, IP, user agent –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    data = f"{name.lower().strip()}-{ip}-{user_agent}-{int(time.time() // 3600)}"  # –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
    hash_obj = hashlib.sha256(data.encode('utf-8'))
    return hash_obj.hexdigest()[:16]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤

def generate_stable_user_id(name: str, ip: str, user_agent: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    data = f"{name.lower().strip()}-{ip}-{user_agent[:50]}"  # –û–±—Ä–µ–∑–∞–µ–º user_agent
    hash_obj = hashlib.md5(data.encode('utf-8'))
    return hash_obj.hexdigest()

# === JWT FUNCTIONS ===

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        token = credentials.credentials
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω: {token[:20]}...")
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        logger.info(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, user_id: {user_id}")
        if user_id is None:
            logger.error("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_id")
            raise HTTPException(status_code=401, detail="Invalid token")
        return user_id
    except JWTError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ JWT: {e}")
        raise HTTPException(status_code=401, detail="Invalid token")

async def get_current_user_optional(request: Request) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    auth_header = request.headers.get("authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        return None
    
    try:
        token = auth_header.split(" ")[1]
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload.get("sub")
    except:
        return None

# === MIDDLEWARE ===

@app.middleware("http")
async def add_client_info(request, call_next):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –∑–∞–ø—Ä–æ—Å"""
    client_ip = request.client.host
    user_agent = request.headers.get("user-agent", "")
    request.state.client_ip = client_ip
    request.state.user_agent = user_agent
    response = await call_next(request)
    return response

# === ENDPOINTS ===

@app.get("/api/health")
@limiter.limit("30/minute")
async def health_check(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "ok", "message": "SecureVoice API v2 is running"}

@app.post("/api/session")
@limiter.limit("30/minute")
async def create_or_get_session(request: Request, response: Response):
    """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await request.json()
    name = data.get("name", "").strip()
    session_token = data.get("session_token")
    
    if not name:
        raise HTTPException(status_code=400, detail="Name is required")
    
    client_ip = request.state.client_ip
    user_agent = request.state.user_agent
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stable_user_id = generate_stable_user_id(name, client_ip, user_agent)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if session_token:
        session = await redis_manager.get_user_session(session_token)
        if session and session.get('stable_user_id') == stable_user_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            session['last_seen'] = time.time()
            session['ip_address'] = client_ip
            session['name'] = name  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await redis_manager.save_user_session(session_token, session)
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (ID: {stable_user_id[:8]})")
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
            jwt_token = create_access_token(data={"sub": session['user_id']})
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            response.set_cookie(
                key="securevoice_session",
                value=session_token,
                max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π
                httponly=True,
                secure=request.url.scheme == "https",
                samesite="strict"
            )
            
            return {"session_token": session_token, "jwt_token": jwt_token, "user": session}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É ID
    existing_sessions = await redis_manager.find_session_by_stable_id(stable_user_id)
    if existing_sessions:
        session_token = existing_sessions[0]['session_token']
        session = existing_sessions[0]['session_data']
        session['last_seen'] = time.time()
        session['name'] = name
        await redis_manager.save_user_session(session_token, session)
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (ID: {stable_user_id[:8]})")
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
        jwt_token = create_access_token(data={"sub": session['user_id']})
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        response.set_cookie(
            key="securevoice_session",
            value=session_token,
            max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π
            httponly=True,
            secure=request.url.scheme == "https",
            samesite="strict"
        )
        
        return {"session_token": session_token, "jwt_token": jwt_token, "user": session}
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    user_id = str(uuid.uuid4())
    user_hash = generate_user_hash(name, client_ip, user_agent)
    
    session_data = {
        "user_id": user_id,
        "stable_user_id": stable_user_id,
        "user_hash": user_hash,
        "name": name,
        "ip_address": client_ip,
        "user_agent": user_agent,
        "created_at": time.time(),
        "last_seen": time.time()
    }
    
    await redis_manager.save_user_session(user_id, session_data)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (Hash: {user_hash}, ID: {stable_user_id[:8]})")
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    jwt_token = create_access_token(data={"sub": user_id})
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    response.set_cookie(
        key="securevoice_session",
        value=user_id,
        max_age=30 * 24 * 60 * 60,  # 30 –¥–Ω–µ–π
        httponly=True,
        secure=request.url.scheme == "https",
        samesite="strict"
    )
    
    return {"session_token": user_id, "jwt_token": jwt_token, "user": session_data}

@app.get("/api/session/restore")
@limiter.limit("60/minute")
async def restore_session(request: Request, response: Response):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ cookie"""
    # –ü–æ–ª—É—á–∞–µ–º session_token –∏–∑ cookie
    session_token = request.cookies.get("securevoice_session")
    
    if not session_token:
        raise HTTPException(status_code=401, detail="No session cookie found")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ Redis
    session = await redis_manager.get_user_session(session_token)
    if not session:
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π cookie
        response.delete_cookie("securevoice_session")
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    session['last_seen'] = time.time()
    await redis_manager.save_user_session(session_token, session)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
    jwt_token = create_access_token(data={"sub": session['user_id']})
    
    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ cookie –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {session['name']} (ID: {session['user_id'][:8]})")
    
    return {"session_token": session_token, "jwt_token": jwt_token, "user": session}

@app.post("/api/rooms")
@limiter.limit("20/minute")
async def create_room(room_data: RoomCreate, request: Request, user_id: str = Depends(verify_token)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT
    session = await redis_manager.get_user_session(user_id)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    room_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    creator_id = session['user_id']
    creator_name = session['name']
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    room = Room(
        id=room_id,
        name=room_data.name,
        password=room_data.password,
        creator_id=creator_id,
        creator_name=creator_name,
        max_participants=room_data.max_participants,
        requires_password=room_data.requires_password,
        has_waiting_room=room_data.has_waiting_room,
        is_active=True,
        created_at=time.time(),
        updated_at=time.time()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    await redis_manager.save_room(room_id, room.model_dump())
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    creator = User(
        id=creator_id,
        name=creator_name,
        ip_address=session.get('ip_address', ''),
        is_creator=True,
        joined_at=time.time()
    )
    await redis_manager.add_participant(room_id, creator.model_dump())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await redis_manager.add_user_room(creator_id, room_id, 'creator')
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room_id} ({room_data.name}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {creator_name}")
    
    return {
        "room_id": room_id, 
        "room": room.model_dump(),
        "user": creator.model_dump()
    }

@app.get("/api/rooms")
async def get_rooms():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"""
    rooms = await redis_manager.get_all_rooms()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
    for room in rooms:
        stats = await redis_manager.get_room_stats(room['id'])
        room.update(stats)
    
    return {"rooms": rooms}

@app.get("/api/rooms/{room_id}")
async def get_room_info(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ"""
    room = await redis_manager.get_room(room_id)
    if not room:
        raise HTTPException(status_code=404, detail="Room not found")
    
    stats = await redis_manager.get_room_stats(room_id)
    room.update(stats)
    
    return {"room": room}

@app.post("/api/rooms/{room_id}/join")
@limiter.limit("30/minute")
async def join_room(room_id: str, user_data: UserJoin, request: Request):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    user_id = None
    session = None
    
    try:
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            token = auth_header.split(" ")[1]
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            user_id = payload.get("sub")
            if user_id:
                session = await redis_manager.get_user_session(user_id)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ JWT
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≥–æ—Å—Ç—è
    if not session:
        user_id = f"guest_{uuid.uuid4().hex[:8]}"
        session = {
            'user_id': user_id,
            'name': user_data.name or '–ì–æ—Å—Ç—å',
            'ip_address': request.client.host,
            'created_at': time.time()
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –Ω–∞ 1 —á–∞—Å
        await redis_manager.save_user_session(user_id, session, 3600)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    room_data = await redis_manager.get_room(room_id)
    if not room_data:
        raise HTTPException(status_code=404, detail="Room not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if room_data['requires_password'] and room_data['password'] and user_data.password != room_data['password']:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")
        raise HTTPException(status_code=401, detail="Invalid password")
    
    user_name = user_data.name if user_data.name.strip() else session['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if await redis_manager.is_participant(room_id, user_id):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        participants = await redis_manager.get_participants(room_id)
        user = next((p for p in participants if p['id'] == user_id), None)
        room_data['participants'] = participants
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        return {"user": user, "room": room_data, "in_waiting_room": False}
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=user_id,
        name=user_name,
        ip_address=session.get('ip_address', ''),
        is_creator=user_id == room_data.get('creator_id'),
        joined_at=time.time()
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è
    participants = await redis_manager.get_participants(room_id)
    is_creator = user_id == room_data.get('creator_id')
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
    if len(participants) >= room_data.get('max_participants', 10):
        # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞—è
        logger.warning(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
        raise HTTPException(status_code=400, detail="Room is full")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—Ä–∞–∑—É
    await redis_manager.add_participant(room_id, user.model_dump())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await notify_user_joined(room_id, user.model_dump())
    
    room_data['participants'] = await redis_manager.get_participants(room_id)
    return {"user": user.model_dump(), "room": room_data, "in_waiting_room": False}

@app.post("/api/rooms/{room_id}/approve")
@limiter.limit("20/minute")
async def approve_user(room_id: str, request: Request, user_id: str = Depends(verify_token)):
    """–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    data = await request.json()
    user_id_to_approve = data.get("user_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT
    session = await redis_manager.get_user_session(user_id)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can approve users")
    
    # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    approved_user = await redis_manager.approve_join_request(room_id, user_id_to_approve)
    if not approved_user:
        raise HTTPException(status_code=404, detail="Join request not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = await redis_manager.get_participants(room_id)
    if len(participants) >= room_data['max_participants']:
        raise HTTPException(status_code=400, detail="Room is full")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    approved_user['joined_at'] = time.time()
    await redis_manager.add_participant(room_id, approved_user)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await notify_user_joined(room_id, approved_user)
    await notify_user_approved(room_id, approved_user)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {approved_user['name']} –æ–¥–æ–±—Ä–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")
    
    return {"message": "User approved", "user": approved_user}

@app.post("/api/rooms/{room_id}/reject")
@limiter.limit("20/minute")
async def reject_user(room_id: str, request: Request, user_id: str = Depends(verify_token)):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    data = await request.json()
    user_id_to_reject = data.get("user_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT
    session = await redis_manager.get_user_session(user_id)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can reject users")
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await redis_manager.reject_join_request(room_id, user_id_to_reject)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    await notify_user_rejected(room_id, user_id_to_reject)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_reject} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {room_id}")
    
    return {"message": "User rejected"}

@app.get("/api/rooms/{room_id}/requests")
@limiter.limit("30/minute")
async def get_join_requests(room_id: str, request: Request, user_id: str = Depends(verify_token)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT
    session = await redis_manager.get_user_session(user_id)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can view join requests")
    
    requests = await redis_manager.get_pending_requests(room_id)
    return {"requests": requests}

@app.delete("/api/rooms/{room_id}")
@limiter.limit("10/minute")
async def delete_room(room_id: str, request: Request, user_id: str = Depends(verify_token)):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT
    session = await redis_manager.get_user_session(user_id)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can delete room")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
    await notify_room_deleted(room_id)
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    await redis_manager.delete_room(room_id)
    await redis_manager.remove_user_room(session['user_id'], room_id)
    
    logger.info(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {session['name']}")
    
    return {"message": "Room deleted"}

@app.get("/api/user/rooms")
@limiter.limit("30/minute")
async def get_user_rooms(request: Request, user_id: str = Depends(verify_token)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = await redis_manager.get_user_session(user_id)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    user_rooms = await redis_manager.get_user_rooms(session['user_id'])
    return {"rooms": user_rooms}

# === WEBSOCKET ===

@app.websocket("/ws/{room_id}/{user_id}")
async def websocket_endpoint(websocket: WebSocket, room_id: str, user_id: str):
    """WebSocket endpoint –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–≤—è–∑–∏"""
    logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–º–Ω–∞—Ç–∞ {room_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    await websocket.accept()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    room_data = await redis_manager.get_room(room_id)
    if not room_data:
        await websocket.close(code=4004, reason="Room not found")
        return
    
    existing_participants = await redis_manager.get_participants(room_id)
    participant_data = None

    for stored_participant in existing_participants:
        normalized = normalize_participant(stored_participant)
        if normalized and normalized["id"] == user_id:
            participant_data = normalized
            break

    if not participant_data:
        session = await redis_manager.get_user_session(user_id)
        participant_data = normalize_participant({
            "id": user_id,
            "name": session.get("name") if session else None,
            "is_creator": room_data.get("creator_id") == user_id,
            "joined_at": time.time()
        })
    else:
        if not participant_data.get("name"):
            session = await redis_manager.get_user_session(user_id)
            if session and session.get("name"):
                participant_data["name"] = session["name"]

    if not participant_data:
        participant_data = normalize_participant({"id": user_id})

    participant_data["status"] = "connected"
    participant_data["last_connected_at"] = time.time()
    participant_data["is_creator"] = participant_data.get("is_creator", room_data.get("creator_id") == user_id)

    await redis_manager.add_participant(room_id, participant_data)
    logger.info(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {participant_data['id']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
    
    if room_id not in active_connections:
        active_connections[room_id] = []
    
    if room_id not in user_connections:
        user_connections[room_id] = {}
    
    active_connections[room_id].append(websocket)
    user_connections[room_id][user_id] = websocket
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Redis
    await redis_manager.add_active_connection(room_id, user_id, {"status": "connected"})
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    raw_participants = await redis_manager.get_participants(room_id)
    participants = []
    for stored_participant in raw_participants:
        normalized = normalize_participant(stored_participant)
        if normalized:
            participants.append(normalized)

    logger.info(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã {room_id}: {[p.get('id') for p in participants]}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await broadcast_to_others(room_id, websocket, json.dumps({
        "type": "user_joined",
        "user": participant_data
    }))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await websocket.send_text(json.dumps({
        "type": "participants_update",
        "participants": participants
    }))
    
    try:
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            if message["type"] == "speaking_status":
                await handle_speaking_status(room_id, user_id, message.get("is_speaking", False))
            elif message["type"] == "ping":
                await websocket.send_text(json.dumps({"type": "pong"}))
            elif message["type"] in ["webrtc_offer", "webrtc_answer", "webrtc_ice_candidate"]:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                await forward_webrtc_message(room_id, user_id, message)
            else:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                await broadcast_to_others(room_id, websocket, data)
                
    except WebSocketDisconnect:
        logger.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É {room_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if room_id in active_connections:
            if websocket in active_connections[room_id]:
                active_connections[room_id].remove(websocket)
            if not active_connections[room_id]:
                del active_connections[room_id]
        
        if room_id in user_connections:
            if user_id in user_connections[room_id]:
                del user_connections[room_id][user_id]
            if not user_connections[room_id]:
                del user_connections[room_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π Redis
        await redis_manager.remove_active_connection(room_id, user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await notify_user_left(room_id, user_id)

# === HELPER FUNCTIONS ===

async def broadcast_to_others(room_id: str, sender_websocket: WebSocket, data: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    if room_id in active_connections:
        for connection in active_connections[room_id]:
            if connection != sender_websocket:
                try:
                    await connection.send_text(data)
                except:
                    active_connections[room_id].remove(connection)

async def broadcast_to_all(room_id: str, message: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã"""
    if room_id in active_connections:
        message_str = json.dumps(message)
        for connection in active_connections[room_id]:
            try:
                await connection.send_text(message_str)
            except:
                active_connections[room_id].remove(connection)

def normalize_participant(participant: Optional[dict], fallback_id: Optional[str] = None) -> Optional[dict]:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    if not participant and not fallback_id:
        return None

    data = (participant or {}).copy()
    participant_id = data.get("id") or data.get("user_id") or fallback_id

    if not participant_id:
        return None

    data["id"] = participant_id
    data["user_id"] = participant_id

    if not data.get("name"):
        data["name"] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {participant_id[:8]}"

    return data

async def notify_creator_only(room_id: str, message: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–º–Ω–∞—Ç—ã"""
    room_data = await redis_manager.get_room(room_id)
    if not room_data:
        return
    
    creator_id = room_data['creator_id']
    
    if room_id in active_connections:
        message_str = json.dumps(message)
        for connection in active_connections[room_id]:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—é
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            try:
                await connection.send_text(message_str)
            except:
                active_connections[room_id].remove(connection)

async def forward_webrtc_message(room_id: str, sender_id: str, message: dict):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
    target_user_id = message.get("to")
    if not target_user_id:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if room_id in user_connections and target_user_id in user_connections[room_id]:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            message["from"] = sender_id
            target_websocket = user_connections[room_id][target_user_id]
            await target_websocket.send_text(json.dumps(message))
            logger.info(f"WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ {message['type']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {sender_id} –∫ {target_user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if room_id in user_connections and target_user_id in user_connections[room_id]:
                del user_connections[room_id][target_user_id]

async def handle_speaking_status(room_id: str, user_id: str, is_speaking: bool):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç"""
    message = {
        "type": "speaking_status",
        "user_id": user_id,
        "is_speaking": is_speaking
    }
    await broadcast_to_all(room_id, message)

async def notify_user_joined(room_id: str, user: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    participant = normalize_participant(user)
    if not participant:
        return

    message = {
        "type": "user_joined",
        "user": participant
    }
    await broadcast_to_all(room_id, message)

async def notify_user_left(room_id: str, user_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = {
        "type": "user_left",
        "user_id": user_id
    }
    await broadcast_to_all(room_id, message)

async def notify_creator_about_request(room_id: str, user: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    message = {
        "type": "join_request",
        "user": user,
        "room_id": room_id
    }
    await notify_creator_only(room_id, message)

async def cleanup_inactive_users():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–º–Ω–∞—Ç"""
    current_time = time.time()
    inactive_threshold = 300  # 5 –º–∏–Ω—É—Ç
    
    for room_id in list(user_connections.keys()):
        inactive_users = []
        
        for user_id, websocket in user_connections[room_id].items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await websocket.ping()
            except:
                # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
                inactive_users.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in inactive_users:
            logger.info(f"–£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {room_id}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ user_connections
            if room_id in user_connections and user_id in user_connections[room_id]:
                del user_connections[room_id][user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ active_connections
            if room_id in active_connections:
                # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º WebSocket
                for i, ws in enumerate(active_connections[room_id]):
                    if ws == user_connections[room_id].get(user_id):
                        active_connections[room_id].pop(i)
                        break
                
                # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if not active_connections[room_id]:
                    del active_connections[room_id]
                    if room_id in user_connections:
                        del user_connections[room_id]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await notify_user_left(room_id, user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            await redis_manager.remove_active_connection(room_id, user_id)

async def notify_user_approved(room_id: str, user: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
    message = {
        "type": "join_approved",
        "user": user,
        "room_id": room_id
    }
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await broadcast_to_all(room_id, message)

async def notify_user_rejected(room_id: str, user_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
    message = {
        "type": "join_rejected",
        "user_id": user_id,
        "room_id": room_id
    }
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await broadcast_to_all(room_id, message)

async def notify_room_deleted(room_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã"""
    message = {
        "type": "room_deleted",
        "room_id": room_id
    }
    await broadcast_to_all(room_id, message)

# === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ===

async def cleanup_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–º–Ω–∞—Ç"""
    while True:
        try:
            await redis_manager.cleanup_expired_rooms()
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_task: {e}")
            await asyncio.sleep(60)

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    asyncio.create_task(cleanup_task())
    logger.info("SecureVoice Server v2 –∑–∞–ø—É—â–µ–Ω")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import asyncio
import threading

async def cleanup_task():
    """–ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            await cleanup_inactive_users()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(60)

def run_cleanup_task():
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(cleanup_task())

if __name__ == "__main__":
    import uvicorn
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    cleanup_thread = threading.Thread(target=run_cleanup_task, daemon=True)
    cleanup_thread.start()
    
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ SecureVoice v2 –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
