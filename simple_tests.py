#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è SecureVoice API (–±–µ–∑ pytest)
"""
import requests
import json
import time

BASE_URL = "http://192.168.127.134:8000"

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get(f"{BASE_URL}/api/health")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "ok"
        print("‚úÖ Health check passed")
        return True
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False

def test_create_room_basic():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...")
    try:
        room_data = {
            "name": "Test Room Basic",
            "password": "",
            "max_participants": 5,
            "requires_password": False,
            "has_waiting_room": False
        }
        
        response = requests.post(f"{BASE_URL}/api/rooms", json=room_data)
        assert response.status_code == 200
        
        data = response.json()
        assert "room_id" in data
        assert data["room"]["name"] == "Test Room Basic"
        assert data["room"]["max_participants"] == 5
        assert not data["room"]["requires_password"]
        assert not data["room"]["has_waiting_room"]
        
        print("‚úÖ Basic room creation passed")
        return data["room_id"]
    except Exception as e:
        print(f"‚ùå Basic room creation failed: {e}")
        return None

def test_create_room_with_password():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º...")
    try:
        room_data = {
            "name": "Test Room Password",
            "password": "secret123",
            "max_participants": 3,
            "requires_password": True,
            "has_waiting_room": False
        }
        
        response = requests.post(f"{BASE_URL}/api/rooms", json=room_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["room"]["requires_password"] == True
        assert data["room"]["password"] == "secret123"
        
        print("‚úÖ Password room creation passed")
        return data["room_id"]
    except Exception as e:
        print(f"‚ùå Password room creation failed: {e}")
        return None

def test_create_room_with_waiting_room():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å –∑–∞–ª–æ–º –æ–∂–∏–¥–∞–Ω–∏—è"""
    print("‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å –∑–∞–ª–æ–º –æ–∂–∏–¥–∞–Ω–∏—è...")
    try:
        room_data = {
            "name": "Test Room Waiting",
            "password": "",
            "max_participants": 2,
            "requires_password": False,
            "has_waiting_room": True
        }
        
        response = requests.post(f"{BASE_URL}/api/rooms", json=room_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["room"]["has_waiting_room"] == True
        assert data["room"]["max_participants"] == 2
        
        print("‚úÖ Waiting room creation passed")
        return data["room_id"]
    except Exception as e:
        print(f"‚ùå Waiting room creation failed: {e}")
        return None

def test_join_room_success(room_id):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    print("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ...")
    try:
        user_data = {
            "name": "Test User",
            "password": ""
        }
        
        response = requests.post(f"{BASE_URL}/api/rooms/{room_id}/join", json=user_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["user"]["name"] == "Test User"
        assert data["room"]["participants"][0]["name"] == "Test User"
        assert not data["in_waiting_room"]
        
        print("‚úÖ Room join success passed")
        return True
    except Exception as e:
        print(f"‚ùå Room join failed: {e}")
        return False

def test_join_room_with_password(room_id):
    """–¢–µ—Å—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
    print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º...")
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        user_data = {
            "name": "Test User",
            "password": "wrongpass"
        }
        
        response = requests.post(f"{BASE_URL}/api/rooms/{room_id}/join", json=user_data)
        assert response.status_code == 401
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        user_data["password"] = "secret123"
        response = requests.post(f"{BASE_URL}/api/rooms/{room_id}/join", json=user_data)
        assert response.status_code == 200
        
        print("‚úÖ Password room join passed")
        return True
    except Exception as e:
        print(f"‚ùå Password room join failed: {e}")
        return False

def test_waiting_room_functionality(room_id):
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è"""
    print("‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è...")
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è)
        for i in range(2):
            user_data = {
                "name": f"User {i+1}",
                "password": ""
            }
            response = requests.post(f"{BASE_URL}/api/rooms/{room_id}/join", json=user_data)
            assert response.status_code == 200
            assert not response.json()["in_waiting_room"]
        
        # –¢—Ä–µ—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è
        user_data = {
            "name": "Waiting User",
            "password": ""
        }
        response = requests.post(f"{BASE_URL}/api/rooms/{room_id}/join", json=user_data)
        assert response.status_code == 200
        assert response.json()["in_waiting_room"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è
        response = requests.get(f"{BASE_URL}/api/rooms/{room_id}/waiting-room")
        assert response.status_code == 200
        waiting_room = response.json()["waiting_room"]
        assert len(waiting_room) == 1
        assert waiting_room[0]["name"] == "Waiting User"
        
        print("‚úÖ Waiting room functionality passed")
        return True
    except Exception as e:
        print(f"‚ùå Waiting room functionality failed: {e}")
        return False

def test_get_rooms_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç...")
    try:
        response = requests.get(f"{BASE_URL}/api/rooms")
        assert response.status_code == 200
        
        data = response.json()
        assert "rooms" in data
        assert isinstance(data["rooms"], list)
        
        print("‚úÖ Get rooms list passed")
        return True
    except Exception as e:
        print(f"‚ùå Get rooms list failed: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    try:
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞
        response = requests.get(f"{BASE_URL}/api/rooms/nonexistent")
        assert response.status_code == 404
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
        user_data = {"name": "Test User", "password": ""}
        response = requests.post(f"{BASE_URL}/api/rooms/nonexistent/join", json=user_data)
        assert response.status_code == 404
        
        print("‚úÖ Error handling passed")
        return True
    except Exception as e:
        print(f"‚ùå Error handling failed: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ SecureVoice API")
    print("=" * 60)
    
    tests_passed = 0
    tests_failed = 0
    
    # –¢–µ—Å—Ç 1: Health check
    if test_health_check():
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    basic_room_id = test_create_room_basic()
    if basic_room_id:
        tests_passed += 1
        # –¢–µ—Å—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –±–∞–∑–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
        if test_join_room_success(basic_room_id):
            tests_passed += 1
        else:
            tests_failed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º
    password_room_id = test_create_room_with_password()
    if password_room_id:
        tests_passed += 1
        # –¢–µ—Å—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º
        if test_join_room_with_password(password_room_id):
            tests_passed += 1
        else:
            tests_failed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –∑–∞–ª–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
    waiting_room_id = test_create_room_with_waiting_room()
    if waiting_room_id:
        tests_passed += 1
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        if test_waiting_room_functionality(waiting_room_id):
            tests_passed += 1
        else:
            tests_failed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    if test_get_rooms_list():
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if test_error_handling():
        tests_passed += 1
    else:
        tests_failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {tests_failed}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {tests_passed/(tests_passed+tests_failed)*100:.1f}%")
    
    if tests_failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   - –ö–ª–∏–µ–Ω—Ç: http://localhost")
        print("   - API: http://localhost/api")
        print("   - API Docs: http://localhost/docs")
    else:
        print(f"\n‚ö†Ô∏è  {tests_failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    return tests_failed == 0

if __name__ == "__main__":
    main()
