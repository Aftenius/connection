/**
 * CookieSessionManager - –Ω–∞–¥–µ–∂–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies –∏ localStorage
 */

class CookieSessionManager {
  constructor() {
    this.SESSION_KEY = 'securevoice_session';
    this.COOKIE_NAME = 'securevoice_session';
    this.API_BASE_URL = process.env.REACT_APP_API_URL || window.location.origin;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookie
   */
  setCookie(name, value, days = 30) {
    const expires = new Date();
    expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict;Secure=${window.location.protocol === 'https:'}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å cookie
   */
  getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å cookie
   */
  deleteCookie(name) {
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
   */
  async createOrRestoreSession(name) {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è:', name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
      const existingSession = await this.getStoredSession();
      if (existingSession && existingSession.user && existingSession.user.name === name) {
        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è');
        return existingSession.user;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ API
      const response = await fetch(`${this.API_BASE_URL}/api/session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          name: name.trim(),
          session_token: existingSession?.session_token || null
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', data);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ localStorage
      const sessionData = {
        session_token: data.session_token,
        jwt_token: data.jwt_token,
        user: data.user,
        saved_at: Date.now()
      };
      
      this.saveSession(sessionData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º session_token –≤ cookie –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      this.setCookie(this.COOKIE_NAME, data.session_token, 30);
      
      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage –∏ cookie');
      return data.user;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ localStorage
   */
  saveSession(sessionData) {
    try {
      localStorage.setItem(this.SESSION_KEY, JSON.stringify(sessionData));
      console.log('üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
   */
  async getStoredSession() {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const stored = localStorage.getItem(this.SESSION_KEY);
      if (stored) {
        const session = JSON.parse(stored);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (24 —á–∞—Å–∞)
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        if (session.saved_at && (Date.now() - session.saved_at) < maxAge) {
          console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ localStorage');
          return session;
        } else {
          console.log('‚ö†Ô∏è –°–µ—Å—Å–∏—è –≤ localStorage –∏—Å—Ç–µ–∫–ª–∞');
          this.clearSession();
        }
      }

      // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º cookie
      const cookieToken = this.getCookie(this.COOKIE_NAME);
      if (cookieToken) {
        console.log('üç™ –ù–∞–π–¥–µ–Ω session_token –≤ cookie, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é');
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ cookie
        try {
          const response = await fetch(`${this.API_BASE_URL}/api/session/restore`, {
            method: 'GET',
            credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ cookies
          });
          
          if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ cookie:', data);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ localStorage
            const sessionData = {
              session_token: data.session_token,
              jwt_token: data.jwt_token,
              user: data.user,
              saved_at: Date.now()
            };
            this.saveSession(sessionData);
            
            return sessionData;
          } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ cookie');
            this.deleteCookie(this.COOKIE_NAME);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ cookie:', error);
          this.deleteCookie(this.COOKIE_NAME);
        }
      }

      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ localStorage, –Ω–∏ –≤ cookie');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentUser() {
    const session = await this.getStoredSession();
    if (session && session.user) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', session.user.name);
      return session.user;
    }
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è
   */
  async hasValidSession() {
    const session = await this.getStoredSession();
    const isValid = !!(session && session.user && session.user.name);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:', { 
      hasSession: !!session, 
      hasUser: !!(session && session.user), 
      hasName: !!(session && session.user && session.user.name),
      isValid 
    });
    return isValid;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
   */
  clearSession() {
    try {
      localStorage.removeItem(this.SESSION_KEY);
      this.deleteCookie(this.COOKIE_NAME);
      console.log('üóëÔ∏è –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞ –∏–∑ localStorage –∏ cookie');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω
   */
  async refreshJWTToken() {
    try {
      const session = await this.getStoredSession();
      if (!session || !session.session_token) {
        console.log('‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JWT');
        return false;
      }

      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω...');
      const response = await fetch(`${this.API_BASE_URL}/api/session/restore`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.session_token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.jwt_token) {
          // –û–±–Ω–æ–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
          session.jwt_token = data.jwt_token;
          await this.saveSession(session);
          console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
          return true;
        }
      }
      
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω');
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async getAuthHeaders() {
    const session = await this.getStoredSession();
    const headers = {
      'Content-Type': 'application/json'
    };
    
    if (session && session.jwt_token) {
      headers['Authorization'] = `Bearer ${session.jwt_token}`;
    } else if (session && session.session_token) {
      headers['Authorization'] = `Bearer ${session.session_token}`;
    }
    
    console.log('üîë –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', headers);
    return headers;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–∞
   */
  async getAuthHeadersWithRefresh() {
    let headers = await this.getAuthHeaders();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (headers['Authorization'] && headers['Authorization'].startsWith('Bearer ')) {
      const token = headers['Authorization'].replace('Bearer ', '');
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É, —ç—Ç–æ JWT
      if (token.includes('.')) {
        try {
          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
          const payload = JSON.parse(atob(token.split('.')[1]));
          const now = Math.floor(Date.now() / 1000);
          
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
          if (payload.exp && payload.exp - now < 300) {
            console.log('‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
            const refreshed = await this.refreshJWTToken();
            if (refreshed) {
              headers = await this.getAuthHeaders();
            }
          }
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å JWT —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º...');
          const refreshed = await this.refreshJWTToken();
          if (refreshed) {
            headers = await this.getAuthHeaders();
          }
        }
      }
    }
    
    return headers;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
   */
  async updateLastSeen() {
    const session = await this.getStoredSession();
    if (session && session.user) {
      session.user.last_seen = Date.now() / 1000;
      this.saveSession(session);
    }
  }
}

export default CookieSessionManager;
