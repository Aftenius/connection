"""
SecureVoice Backend v2 —Å Redis –∏ —Å–∏—Å—Ç–µ–º–æ–π —Å–µ—Å—Å–∏–π
"""
import json
import uuid
import logging
import time
import asyncio
from typing import Dict, List, Optional
from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from redis_manager import redis_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/server.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = FastAPI(title="SecureVoice API v2", version="2.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://client:3000", "http://192.168.127.134:3000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
active_connections: Dict[str, List[WebSocket]] = {}

# Pydantic –º–æ–¥–µ–ª–∏
class UserSession(BaseModel):
    user_id: str
    name: str
    ip_address: str
    user_agent: str
    created_at: float
    last_seen: float

class RoomCreate(BaseModel):
    name: str
    password: str = ""
    max_participants: int = 10
    requires_password: bool = False
    has_waiting_room: bool = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è

class UserJoin(BaseModel):
    name: str
    password: str = ""
    session_token: Optional[str] = None

class Room(BaseModel):
    id: str
    name: str
    password: str
    creator_id: str
    creator_name: str
    max_participants: int
    requires_password: bool
    has_waiting_room: bool
    is_active: bool
    created_at: float
    updated_at: float

class User(BaseModel):
    id: str
    name: str
    ip_address: str = ""
    is_creator: bool = False
    joined_at: float
    is_muted: bool = False
    is_speaking: bool = False

# === MIDDLEWARE ===

@app.middleware("http")
async def add_client_info(request, call_next):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –∑–∞–ø—Ä–æ—Å"""
    client_ip = request.client.host
    user_agent = request.headers.get("user-agent", "")
    request.state.client_ip = client_ip
    request.state.user_agent = user_agent
    response = await call_next(request)
    return response

# === ENDPOINTS ===

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "ok", "message": "SecureVoice API v2 is running"}

@app.post("/api/session")
async def create_or_get_session(request):
    """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await request.json()
    name = data.get("name", "").strip()
    session_token = data.get("session_token")
    
    if not name:
        raise HTTPException(status_code=400, detail="Name is required")
    
    client_ip = request.state.client_ip
    user_agent = request.state.user_agent
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if session_token:
        session = await redis_manager.get_user_session(session_token)
        if session and session.get('name') == name:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            session['last_seen'] = time.time()
            session['ip_address'] = client_ip
            await redis_manager.save_user_session(session_token, session)
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}")
            return {"session_token": session_token, "user": session}
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    user_id = str(uuid.uuid4())
    session_data = {
        "user_id": user_id,
        "name": name,
        "ip_address": client_ip,
        "user_agent": user_agent,
        "created_at": time.time(),
        "last_seen": time.time()
    }
    
    await redis_manager.save_user_session(user_id, session_data)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (ID: {user_id})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
    saved_session = await redis_manager.get_user_session(user_id)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {saved_session is not None}")
    if saved_session:
        logger.info(f"–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: user_id={user_id}, name={saved_session.get('name')}")
    else:
        logger.error(f"–°–µ—Å—Å–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: user_id={user_id}")
    
    return {"session_token": user_id, "user": session_data}

@app.post("/api/rooms")
async def create_room(room_data: RoomCreate, request):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
    logger.info("üöÄ –§–£–ù–ö–¶–ò–Ø create_room –í–´–ó–í–ê–ù–ê!")
    logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: {room_data}")
    logger.info(f"üåê –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {dict(request.headers)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    auth_header = request.headers.get("Authorization", "")
    logger.info(f"üîç Authorization header: '{auth_header}'")
    session_token = auth_header.replace("Bearer ", "")
    logger.info(f"üîç Session token: '{session_token}'")
    if not session_token:
        logger.error(f"‚ùå Session token –ø—É—Å—Ç!")
        raise HTTPException(status_code=401, detail="Invalid token")
    
    logger.info(f"üîç –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É: {session_token}")
    session = await redis_manager.get_user_session(session_token)
    if not session:
        logger.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {session_token}")
        raise HTTPException(status_code=401, detail="Invalid session")
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session}")
    
    room_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    creator_id = session['user_id']
    creator_name = session['name']
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    room = Room(
        id=room_id,
        name=room_data.name,
        password=room_data.password,
        creator_id=creator_id,
        creator_name=creator_name,
        max_participants=room_data.max_participants,
        requires_password=room_data.requires_password,
        has_waiting_room=room_data.has_waiting_room,
        is_active=True,
        created_at=time.time(),
        updated_at=time.time()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    await redis_manager.save_room(room_id, room.model_dump())
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    creator = User(
        id=creator_id,
        name=creator_name,
        ip_address=session.get('ip_address', ''),
        is_creator=True,
        joined_at=time.time()
    )
    await redis_manager.add_participant(room_id, creator.model_dump())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await redis_manager.add_user_room(creator_id, room_id, 'creator')
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room_id} ({room_data.name}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {creator_name}")
    
    return {
        "room_id": room_id, 
        "room": room.model_dump(),
        "user": creator.model_dump()
    }

@app.get("/api/rooms")
async def get_rooms():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"""
    rooms = await redis_manager.get_all_rooms()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
    for room in rooms:
        stats = await redis_manager.get_room_stats(room['id'])
        room.update(stats)
    
    return {"rooms": rooms}

@app.get("/api/rooms/{room_id}")
async def get_room_info(room_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ"""
    room = await redis_manager.get_room(room_id)
    if not room:
        raise HTTPException(status_code=404, detail="Room not found")
    
    stats = await redis_manager.get_room_stats(room_id)
    room.update(stats)
    
    return {"room": room}

@app.post("/api/rooms/{room_id}/join")
async def join_room(room_id: str, user_data: UserJoin, request):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_token = user_data.session_token or request.headers.get("Authorization", "").replace("Bearer ", "")
    if not session_token:
        raise HTTPException(status_code=401, detail="Session token required")
    
    session = await redis_manager.get_user_session(session_token)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    room_data = await redis_manager.get_room(room_id)
    if not room_data:
        raise HTTPException(status_code=404, detail="Room not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if room_data['requires_password'] and room_data['password'] and user_data.password != room_data['password']:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")
        raise HTTPException(status_code=401, detail="Invalid password")
    
    user_id = session['user_id']
    user_name = user_data.name if user_data.name.strip() else session['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if await redis_manager.is_participant(room_id, user_id):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        participants = await redis_manager.get_participants(room_id)
        user = next((p for p in participants if p['id'] == user_id), None)
        room_data['participants'] = participants
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        return {"user": user, "room": room_data, "in_waiting_room": False}
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=user_id,
        name=user_name,
        ip_address=session.get('ip_address', ''),
        is_creator=user_id == room_data['creator_id'],
        joined_at=time.time()
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è
    participants = await redis_manager.get_participants(room_id)
    is_creator = user_id == room_data['creator_id']
    
    if is_creator:
        # –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å—Ä–∞–∑—É
        await redis_manager.add_participant(room_id, user.model_dump())
        logger.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—å {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await notify_user_joined(room_id, user.model_dump())
        
        room_data['participants'] = await redis_manager.get_participants(room_id)
        return {"user": user.model_dump(), "room": room_data, "in_waiting_room": False}
    
    elif room_data['has_waiting_room']:
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–¥—É—Ç –≤ –∑–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
        await redis_manager.add_join_request(room_id, user.model_dump())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        await notify_creator_about_request(room_id, user.model_dump())
        
        return {"user": user.model_dump(), "room": room_data, "in_waiting_room": True, "awaiting_approval": True}
    
    elif len(participants) >= room_data['max_participants']:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –∫–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞—è
        logger.warning(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
        raise HTTPException(status_code=400, detail="Room is full")
    
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—Ä–∞–∑—É
        await redis_manager.add_participant(room_id, user.model_dump())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await notify_user_joined(room_id, user.model_dump())
        
        room_data['participants'] = await redis_manager.get_participants(room_id)
        return {"user": user.model_dump(), "room": room_data, "in_waiting_room": False}

@app.post("/api/rooms/{room_id}/approve")
async def approve_user(room_id: str, request):
    """–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    data = await request.json()
    user_id_to_approve = data.get("user_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_token = request.headers.get("Authorization", "").replace("Bearer ", "")
    session = await redis_manager.get_user_session(session_token)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can approve users")
    
    # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    approved_user = await redis_manager.approve_join_request(room_id, user_id_to_approve)
    if not approved_user:
        raise HTTPException(status_code=404, detail="Join request not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = await redis_manager.get_participants(room_id)
    if len(participants) >= room_data['max_participants']:
        raise HTTPException(status_code=400, detail="Room is full")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    approved_user['joined_at'] = time.time()
    await redis_manager.add_participant(room_id, approved_user)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await notify_user_joined(room_id, approved_user)
    await notify_user_approved(room_id, approved_user)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {approved_user['name']} –æ–¥–æ–±—Ä–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")
    
    return {"message": "User approved", "user": approved_user}

@app.post("/api/rooms/{room_id}/reject")
async def reject_user(room_id: str, request):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    data = await request.json()
    user_id_to_reject = data.get("user_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_token = request.headers.get("Authorization", "").replace("Bearer ", "")
    session = await redis_manager.get_user_session(session_token)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can reject users")
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await redis_manager.reject_join_request(room_id, user_id_to_reject)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    await notify_user_rejected(room_id, user_id_to_reject)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_reject} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {room_id}")
    
    return {"message": "User rejected"}

@app.get("/api/rooms/{room_id}/requests")
async def get_join_requests(room_id: str, request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_token = request.headers.get("Authorization", "").replace("Bearer ", "")
    session = await redis_manager.get_user_session(session_token)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can view join requests")
    
    requests = await redis_manager.get_pending_requests(room_id)
    return {"requests": requests}

@app.delete("/api/rooms/{room_id}")
async def delete_room(room_id: str, request):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_token = request.headers.get("Authorization", "").replace("Bearer ", "")
    session = await redis_manager.get_user_session(session_token)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    room_data = await redis_manager.get_room(room_id)
    if not room_data or session['user_id'] != room_data['creator_id']:
        raise HTTPException(status_code=403, detail="Only room creator can delete room")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
    await notify_room_deleted(room_id)
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    await redis_manager.delete_room(room_id)
    await redis_manager.remove_user_room(session['user_id'], room_id)
    
    logger.info(f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {session['name']}")
    
    return {"message": "Room deleted"}

@app.get("/api/user/rooms")
async def get_user_rooms(request):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session_token = request.headers.get("Authorization", "").replace("Bearer ", "")
    session = await redis_manager.get_user_session(session_token)
    if not session:
        raise HTTPException(status_code=401, detail="Invalid session")
    
    user_rooms = await redis_manager.get_user_rooms(session['user_id'])
    return {"rooms": user_rooms}

# === WEBSOCKET ===

@app.websocket("/ws/{room_id}/{user_id}")
async def websocket_endpoint(websocket: WebSocket, room_id: str, user_id: str):
    """WebSocket endpoint –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–≤—è–∑–∏"""
    logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–º–Ω–∞—Ç–∞ {room_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    await websocket.accept()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã
    if not await redis_manager.is_participant(room_id, user_id):
        await websocket.close(code=4003, reason="Not a participant")
        return
    
    if room_id not in active_connections:
        active_connections[room_id] = []
    
    active_connections[room_id].append(websocket)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Redis
    await redis_manager.add_active_connection(room_id, user_id, {"status": "connected"})
    
    try:
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            if message["type"] == "speaking":
                await handle_speaking_status(room_id, user_id, message.get("is_speaking", False))
            elif message["type"] == "ping":
                await websocket.send_text(json.dumps({"type": "pong"}))
            else:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                await broadcast_to_others(room_id, websocket, data)
                
    except WebSocketDisconnect:
        logger.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É {room_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if room_id in active_connections:
            if websocket in active_connections[room_id]:
                active_connections[room_id].remove(websocket)
            if not active_connections[room_id]:
                del active_connections[room_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π Redis
        await redis_manager.remove_active_connection(room_id, user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await notify_user_left(room_id, user_id)

# === HELPER FUNCTIONS ===

async def broadcast_to_others(room_id: str, sender_websocket: WebSocket, data: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    if room_id in active_connections:
        for connection in active_connections[room_id]:
            if connection != sender_websocket:
                try:
                    await connection.send_text(data)
                except:
                    active_connections[room_id].remove(connection)

async def broadcast_to_all(room_id: str, message: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã"""
    if room_id in active_connections:
        message_str = json.dumps(message)
        for connection in active_connections[room_id]:
            try:
                await connection.send_text(message_str)
            except:
                active_connections[room_id].remove(connection)

async def notify_creator_only(room_id: str, message: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–º–Ω–∞—Ç—ã"""
    room_data = await redis_manager.get_room(room_id)
    if not room_data:
        return
    
    creator_id = room_data['creator_id']
    
    if room_id in active_connections:
        message_str = json.dumps(message)
        for connection in active_connections[room_id]:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—é
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            try:
                await connection.send_text(message_str)
            except:
                active_connections[room_id].remove(connection)

async def handle_speaking_status(room_id: str, user_id: str, is_speaking: bool):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç"""
    message = {
        "type": "speaking",
        "user_id": user_id,
        "is_speaking": is_speaking
    }
    await broadcast_to_all(room_id, message)

async def notify_user_joined(room_id: str, user: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = {
        "type": "user_joined",
        "user": user
    }
    await broadcast_to_all(room_id, message)

async def notify_user_left(room_id: str, user_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = {
        "type": "user_left",
        "user_id": user_id
    }
    await broadcast_to_all(room_id, message)

async def notify_creator_about_request(room_id: str, user: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    message = {
        "type": "join_request",
        "user": user,
        "room_id": room_id
    }
    await notify_creator_only(room_id, message)

async def notify_user_approved(room_id: str, user: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
    message = {
        "type": "join_approved",
        "user": user,
        "room_id": room_id
    }
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await broadcast_to_all(room_id, message)

async def notify_user_rejected(room_id: str, user_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
    message = {
        "type": "join_rejected",
        "user_id": user_id,
        "room_id": room_id
    }
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await broadcast_to_all(room_id, message)

async def notify_room_deleted(room_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã"""
    message = {
        "type": "room_deleted",
        "room_id": room_id
    }
    await broadcast_to_all(room_id, message)

# === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ===

async def cleanup_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–º–Ω–∞—Ç"""
    while True:
        try:
            await redis_manager.cleanup_expired_rooms()
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_task: {e}")
            await asyncio.sleep(60)

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    asyncio.create_task(cleanup_task())
    logger.info("SecureVoice Server v2 –∑–∞–ø—É—â–µ–Ω")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

if __name__ == "__main__":
    import uvicorn
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ SecureVoice v2 –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
