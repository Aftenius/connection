#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecureVoice API v2 —Å Redis –∏ —Å–µ—Å—Å–∏—è–º–∏
"""
import requests
import json
import time

BASE_URL = "http://192.168.127.134:8000"

def test_v2_session_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecureVoice API v2")
    print("=" * 60)
    
    # 1. Health check
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ v2...")
    try:
        response = requests.get(f"{BASE_URL}/api/health")
        data = response.json()
        print(f"‚úÖ Health check: {data['message']}")
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    try:
        session_data = {
            "name": "Test User V2"
        }
        response = requests.post(f"{BASE_URL}/api/session", json=session_data)
        if response.status_code == 200:
            data = response.json()
            session_token = data['session_token']
            user_data = data['user']
            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {user_data['name']} (ID: {session_token[:8]}...)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Session creation failed: {e}")
        return False
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    print("\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã...")
    try:
        headers = {
            'Authorization': f'Bearer {session_token}',
            'Content-Type': 'application/json'
        }
        room_data = {
            "name": "Test Room V2",
            "password": "test123",
            "max_participants": 5,
            "requires_password": True,
            "has_waiting_room": True
        }
        response = requests.post(f"{BASE_URL}/api/rooms", json=room_data, headers=headers)
        if response.status_code == 200:
            data = response.json()
            room_id = data['room_id']
            room = data['room']
            user = data['user']
            print(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {room['name']} (ID: {room_id})")
            print(f"   –°–æ–∑–¥–∞—Ç–µ–ª—å: {user['name']} (is_creator: {user['is_creator']})")
            print(f"   –ó–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è: {'–î–∞' if room['has_waiting_room'] else '–ù–µ—Ç'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Room creation failed: {e}")
        return False
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç...")
    try:
        response = requests.get(f"{BASE_URL}/api/rooms")
        if response.status_code == 200:
            data = response.json()
            rooms = data['rooms']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: {len(rooms)}")
            for room in rooms:
                print(f"   - {room['name']}: {room['participants_count']}/{room['max_participants']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Get rooms failed: {e}")
        return False
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    try:
        response = requests.get(f"{BASE_URL}/api/user/rooms", headers=headers)
        if response.status_code == 200:
            data = response.json()
            user_rooms = data['rooms']
            print(f"‚úÖ –ö–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_rooms)}")
            for room in user_rooms:
                print(f"   - {room['name']} (—Ä–æ–ª—å: {room['role']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Get user rooms failed: {e}")
        return False
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        session_data2 = {
            "name": "Test User 2"
        }
        response = requests.post(f"{BASE_URL}/api/session", json=session_data2)
        data2 = response.json()
        session_token2 = data2['session_token']
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        headers2 = {
            'Authorization': f'Bearer {session_token2}',
            'Content-Type': 'application/json'
        }
        join_data = {
            "name": "Test User 2",
            "password": "test123",
            "session_token": session_token2
        }
        response = requests.post(f"{BASE_URL}/api/rooms/{room_id}/join", json=join_data, headers=headers2)
        if response.status_code == 200:
            data = response.json()
            if data.get('awaiting_approval'):
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Join request failed: {e}")
        return False
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    try:
        import subprocess
        result = subprocess.run(['docker', 'exec', '-it', 'connention-redis-1', 'redis-cli', 'ping'], 
                              capture_output=True, text=True, timeout=5)
        if 'PONG' in result.stdout:
            print("‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Redis: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã API v2 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
    print(f"   - –ö–ª–∏–µ–Ω—Ç: http://192.168.127.134:3000")
    print(f"   - API: http://192.168.127.134:8000")
    print(f"   - API Docs: http://192.168.127.134:8000/docs")
    print(f"   - Redis: 192.168.127.134:6379")
    
    return True

if __name__ == "__main__":
    test_v2_session_api()
